#include <SoftwareSerial.h>                                  //Gerekli kütüphaneleri ekliyoruz.
#include <Wire.h>

#define trigPinSol 13
#define echoPinSol 12
#define trigPinOn 7
#define echoPinOn 8
#define trigPinSag 11
#define echoPinSag 10

#define MotorL1 3
#define MotorL2 2
#define MotorR1 5
#define MotorR2 4
#define MotorLenable 6
#define MotorRenable 9 

void setup() {
  pinMode(trigPinSol, OUTPUT);
  pinMode(echoPinSol, INPUT);
  pinMode(trigPinOn, OUTPUT);
  pinMode(echoPinOn, INPUT);
  pinMode(trigPinSag, OUTPUT);
  pinMode(echoPinSag, INPUT);

  pinMode(MotorR1, OUTPUT);
  pinMode(MotorR2, OUTPUT);
  pinMode(MotorL1, OUTPUT);
  pinMode(MotorL2, OUTPUT);
  pinMode(MotorLenable, OUTPUT);
  pinMode(MotorRenable, OUTPUT);

  Serial.begin(9600);
}

void loop() {
  long distanceOn = readUltrasonicDistance(trigPinOn, echoPinOn);
  long distanceSol = readUltrasonicDistance(trigPinSol, echoPinSol);
  long distanceSag = readUltrasonicDistance(trigPinSag, echoPinSag);
  
  while (Serial.available()) {
    char command = (char)Serial.read();
    handleBluetoothCommand(command);
  }
if (distanceOn > 20) {
    ileriGit();
  } else if(distanceOn <20){
    Dur();
    delay(100);
    geriGit();
    delay(500);
    solaDon();
    delay(500);
  } else if (distanceOn <= 20 && distanceSag <= 20) {
    Dur();
    delay(100);
    geriGit();
    delay(500);
    solaDon();
    delay(500);
  } else if (distanceOn <= 20 && distanceSol <=20) {
    Dur();
    delay(100);
    geriGit();
    delay(500);
    sagaDon();
    delay(500);
  }  else {

    ileriGit();
    // Durma ya da başka bir hareket ekleyebilirsiniz

 
  }
  if (distanceSol > 15) {
    ileriGit();
  } else if(distanceSol <15){
    Dur();
    delay(100);
    sagaDon();
    delay(500);
  } else if (distanceSol <= 15 && distanceSag <= 15) {
    Dur();
    delay(100);
    geriGit();
    delay(500);
    sagaDon();
    delay(500);
  } else if (distanceSol <= 15 && distanceOn <=15) {
    Dur();
    delay(100);
    geriGit();
    delay(500);
    sagaDon();
    delay(500);
  }  else {

    ileriGit();
    // Durma ya da başka bir hareket ekleyebilirsiniz

 
  }
  if (distanceSag > 15) {
    ileriGit();
  } else if(distanceSag <15){
    Dur();
    delay(100);
    solaDon();
    delay(500);
  } else if (distanceSag <= 15 && distanceSol <= 15) {
    Dur();
    delay(100);
    geriGit();
    delay(500);
    solaDon();
    delay(500);
  } else if (distanceSag <= 15 && distanceOn <=15) {
    Dur();
    delay(100);
    geriGit();
    delay(500);
    solaDon();
    delay(500);
  }  else {

    ileriGit();
    // Durma ya da başka bir hareket ekleyebilirsiniz

 
  }
  Serial.print(" cm\tDıstance Left: ");
  Serial.print(distanceSol);
  Serial.print(" cm\tDıstance Front: ");
  Serial.print(distanceOn);
  Serial.print(" cm\tDistance Right: ");
  Serial.print(distanceSag);
  Serial.println ();
  delay(100);
  // Diğer kodlar devam eder...
}

void handleBluetoothCommand(char command) {
  switch (command) {
    case 'F': // İleri git komutu
      ileriGit();
      break;
    case 'B': // Geri git komutu
      geriGit();
      break;
    case 'L': // Sola dön komutu
      solaDon();
      break;
    case 'R': // Sağa dön komutu
      sagaDon();
      break;
    case 'S': // Dur komutu
      Dur();
      break;
    default:
      // Bilinmeyen komut
      break;
  }
}

long mesafehesapla(long sure) {
  if( sure == 0 || sure >= 23200) {
    return -1;  
  }
  else {
    return sure/29.1/2;
  }
}

long readUltrasonicDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);
  long distance = duration * 0.034 / 2;
  return distance;
}

void ileriGit() {
  digitalWrite(MotorR1, HIGH);
  digitalWrite(MotorR2, LOW);
  digitalWrite(MotorL1, HIGH);
  digitalWrite(MotorL2, LOW);
  analogWrite(MotorRenable, 150);
  analogWrite(MotorLenable, 150);
}

void geriGit() {
  digitalWrite(MotorR1, LOW);
  digitalWrite(MotorR2, HIGH);
  digitalWrite(MotorL1, LOW);
  digitalWrite(MotorL2, HIGH);
  analogWrite(MotorRenable, 150);
  analogWrite(MotorLenable, 150);
}

void solaDon() {
  digitalWrite(MotorR1, HIGH);
  digitalWrite(MotorR2, LOW);
  digitalWrite(MotorL1, LOW);
  digitalWrite(MotorL2, HIGH);
  analogWrite(MotorRenable, 150);
  analogWrite(MotorLenable, 150);
}

void sagaDon() {
  digitalWrite(MotorR1, LOW);
  digitalWrite(MotorR2, HIGH);
  digitalWrite(MotorL1, HIGH);
  digitalWrite(MotorL2, LOW);
  analogWrite(MotorRenable, 150);
  analogWrite(MotorLenable, 150);
}

void Dur() {
  digitalWrite(MotorR1, LOW);
  digitalWrite(MotorR2, LOW);
  digitalWrite(MotorL1, LOW);
  digitalWrite(MotorL2, LOW);
  analogWrite(MotorRenable, 0);
  analogWrite(MotorLenable, 0);
}
